<?php

/**
 * Load template files
 */

function pluraltheme_theme() {
  return [
    'circled_icon' => array(
      'variables' => array('title' => NULL, 'icon' => NULL),
    ),
  ];
}

/**
 * Implements hook_form_alter().
 *
 * Alters the login form to use placeholder attributes and hides the titles.
 */
function pluraltheme_form_user_login_form_alter(&$form, $form_state) {
  // Hide the username textfield label and use a placeholder instead.
  $form['name']['#title_display'] = 'invisible';
  $form['name']['#placeholder'] = $form['name']['#description'];
  unset($form['name']['#description']);

  // Hide the password textfield label and use a placeholder instead.
  $form['pass']['#title_display'] = 'invisible';
  $form['pass']['#placeholder'] = t('Enter your password');
  unset($form['pass']['#description']);
}

/**
 * Implements hook_preprocess_breadcrumb().
 *
 * Adds the "title" variable so that the current page can be added as a breadcrumb.
 */
function pluraltheme_preprocess_breadcrumb(&$variables) {
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());

  $variables['title'] = $title;
}

/**
 * Implements hook_preprocess_block()
 */
function pluraltheme_preprocess_block(&$variables) {
  // Convenience variable for block headers.
  $title_class = &$variables['title_attributes']['class'];

  // Generic block header class.
  $title_class[] = 'block-title';

  $region = isset($variables['configuration']['region']) ? $variables['configuration']['region'] : '';

  if ($region == 'header') {
    $title_class[] = 'visually-hidden';
  }

  // Add a unique class for each block for styling.
  if (isset($variables['attributes']['id'])) {
    $variables['attributes']['class'][] = $variables['attributes']['id'];
  }

  switch ($region) {
    // Add a striping class
    case 'sidebar_first':
    case 'sidebar_second':
      #$variables['attributes']['class'][] = 'block-' . $variables['zebra'];
    break;

    case 'header':
      $variables['attributes']['class'][] = 'header';
    break;

    default;
  }
}

/**
 * Implements template_preprocess_field().
 */
function pluraltheme_preprocess_field(&$variables) {
  if (!isset($variables['title_attributes']['class'])) {
    $variables['title_attributes']['class'] = array();
  }
  if (!isset($variables['content_attributes']['class'])) {
    $variables['content_attributes']['class'] = array();
  }
  $variables['title_attributes']['class'][] = 'field-label';

  // Convenience variables
  $mode = $variables['element']['#view_mode'];
  $classes = &$variables['attributes']['class'];
  $content_classes = &$variables['content_attributes']['class'];
  $item_classes = array();

  // Global field classes
  $classes[] = 'field-wrapper';
  $content_classes[] = 'field-items';
  $item_classes[] = 'field-item';

  // Add specific classes to targeted fields
  if(isset($field)) {
    switch ($mode) {
      // All teasers
      case 'teaser':
        switch ($field) {
          // Teaser read more links
          case 'node_link':
            $item_classes[] = 'more-link';
            break;
          // Teaser descriptions
          case 'body':
          case 'field_description':
            $item_classes[] = 'description';
            break;
        }
      break;
    }
  }

  // Apply odd or even classes along with our custom classes to each item
  foreach ($variables['items'] as $delta => $item) {
    $item_classes[] = $delta % 2 ? 'odd' : 'even';
    $variables['item_attributes'][$delta]['class'] = $item_classes;
  }

  // Add class to a specific fields across content types.
  switch ($variables['element']['#field_name']) {
    case 'body':
      $classes = array('body');
      break;

    case 'field_summary':
      $classes[] = 'text-teaser';
      break;

    case 'field_link':
    case 'field_date':
      // Replace classes entirely, instead of adding extra.
    $classes = array('text-content');
      break;

    case 'field_image':
      // Replace classes entirely, instead of adding extra.
      $classes = array('image');
      break;

    default:
      break;
  }

  // Add classes to body based on content type and view mode.
  if ($variables['element']['#field_name'] == 'body') {
    // Add classes to other content types with view mode 'teaser';
    if ($variables['element']['#view_mode'] == 'teaser') {
      $classes[] = 'text-secondary';
    }
    // The rest is text-content.
    else {
      $classes[] = 'field';
    }
  }
}

/**
 * Implements template_preprocess_html().
 *
 * Adds additional classes
 */
function pluraltheme_preprocess_html(&$variables) {
  /* @var Drupal\Core\Language\LanguageInterface */
  $language = \Drupal::languageManager()->getCurrentLanguage();
  $site_language = $language->getId();
  $site_language_direction = $language->getDirection();
  $request = \Drupal::request();

  // Clean up the lang attributes
  $variables['html_attributes'] = 'lang="' . $site_language . '" dir="' . $site_language_direction . '"';

  // Add language body class.
  $variables['attributes']['class'][] = 'lang-' . $site_language;

  // Classes for body element. Allows advanced theming based on context
  $is_front_page = \Drupal::service('path.matcher')->isFrontPage();
  if (!$is_front_page) {
    $path = trim($request->getRequestUri(), '/');
    // Add unique class for each website section.
    $arg = explode('/', $path);
    $section = $arg[0];
    if ($arg[0] == 'node' && isset($arg[1])) {
      if ($arg[1] == 'add') {
        $section = 'node-add';
      }
      elseif (isset($arg[2]) && is_numeric($arg[1]) && ($arg[2] == 'edit' || $arg[2] == 'delete')) {
        $section = 'node-' . $arg[2];
      }
    }
    $variables['attributes']['class'][] = \Drupal\Component\Utility\Html::getClass('section-' . $section);
  }

  // Store the menu item since it has some useful information.
  if ($request->attributes->get('view_id')) {
    $variables['attributes']['class'][] = 'views-page';
  }
  elseif ($request->attributes->get('panel')) {
    $variables['attributes']['class'][] = 'panels-page';
  }
}

/**
 * Implements hook_page_attachments_alter
 *
 * Add custom meta tags to the header.
 */
function pluraltheme_page_attachments_alter(&$page) {
  // Optimize mobile viewport.
  $page['#attached']['html_head'][] = array(array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
        'name' => 'viewport',
        'content' => 'width=device-width',
      ),
  ), 'mobile_viewport');

  // Force IE to use Chrome Frame if installed.
  $page['#attached']['html_head'][] = array(array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'content' => 'ie=edge, chrome=1',
      'http-equiv' => 'x-ua-compatible',
    ),
  ), 'chrome_frame');

  // Remove image toolbar in IE.
  $page['#attached']['html_head'][] = array(array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'http-equiv' => 'ImageToolbar',
      'content' => 'false',
    ),
  ), 'ie_image_toolbar');
}

/**
 * Implements template_preprocess_node
 *
 * Add template suggestions and classes
 */
function pluraltheme_preprocess_node(&$variables) {
  // Add node--node_type--view_mode.html.twig suggestions
  $variables['theme_hook_suggestions'][] = 'node__' . $variables['elements']['#node']->bundle() . '__' . $variables['view_mode'];

  // Add node--view_mode.html.twig suggestions
  $variables['theme_hook_suggestions'][] = 'node__' . $variables['view_mode'];

  // Add a class for the view mode.
  if (!$variables['teaser']) {
    $variables['content_attributes']['class'][] = 'view-mode-' . $variables['view_mode'];
  }

  $variables['title_attributes']['class'][] = 'node-title';
}

/**
 * Implements template_preprocess_page
 *
 * Add convenience variables and template suggestions
 */
function pluraltheme_preprocess_page(&$variables) {
  $site_name = isset($variables['site_name']) ? $variables['site_name'] : \Drupal::config('system.site')->get('name');

  // Add page--node_type.html.twig suggestions
  if (!empty($variables['node'])) {
    $variables['theme_hook_suggestions'][] = 'page__' . $variables['node']->bundle();
  }

  $variables['logo_img'] = '';
  if (!empty($variables['logo'])) {
    $elements = array(
      '#theme' => 'image',
      '#attributes' => array(
        'src' => $variables['logo'],
        'alt' => strip_tags($site_name) . ' ' . t('logo'),
        'title' => strip_tags($site_name) . ' ' . t('Home'),
        'class' => array('logo'),
      )
    );

    $variables['logo_img'] = $elements;
  }

  $title = strip_tags($site_name) . ' ' . t('Home');
  $url = \Drupal\Core\Url::fromRoute('<front>');
  $url->setOption('attributes', array('title' => $title));

  $variables['linked_logo'] = '';
  if (!empty($variables['logo_img'])) {
    $variables['linked_logo'] = \Drupal::l($variables['logo_img'], $url);
  }

  $variables['linked_site_name'] = '';
  if (!empty($site_name)) {
    $variables['linked_site_name'] = \Drupal::l($site_name, $url);
  }

  // Remove blocks that are not main content from the 'user/login' page.
  if (\Drupal::routeMatch()->getRouteName() === 'user.login') {
    foreach ($variables['page']['content'] as $key => $value) {
      // @todo: Use of '_content' here is fragile. Need more robust
      // method to distinguish.
      if ($key[0] != '#' && strpos($key, '_content') === FALSE) {
        unset($variables['page']['content'][$key]);
      }
    }
    // Also remove sidebar regions.
    $variables['page']['sidebar_first'] = $variables['page']['sidebar_second'] = '';
  }

  // Convenience variables
  $left = $variables['page']['sidebar_first'];
  $right = $variables['page']['sidebar_second'];

  // Dynamic sidebars
  if (!empty($left) && !empty($right)) {
    // foundation:
    $variables['main_grid'] = 'large-6 large-push-3';
    $variables['sidebar_first_grid'] = 'large-3 large-pull-6';
    $variables['sidebar_sec_grid'] = 'large-3';

    // bootstrap:
    $variables['main_grid'] = 'col-md-6 col-md-push-3';
    $variables['sidebar_first_grid'] = 'col-md-3 col-md-pull-6';
    $variables['sidebar_sec_grid'] = 'col-md-3';
  }
  elseif (empty($left) && !empty($right)) {
    // foundation:
    $variables['main_grid'] = 'large-9';
    $variables['sidebar_first_grid'] = '';
    $variables['sidebar_sec_grid'] = 'large-3';

    //bootstrap
    $variables['main_grid'] = 'col-md-9';
    $variables['sidebar_first_grid'] = '';
    $variables['sidebar_sec_grid'] = 'col-md-3';
  }
  elseif (!empty($left) && empty($right)) {
    // foundation:
    $variables['main_grid'] = 'large-9 large-push-3';
    $variables['sidebar_first_grid'] = 'large-3 large-pull-9';
    $variables['sidebar_sec_grid'] = '';

    //bootstrap
    $variables['main_grid'] = 'col-md-9 col-md-push-3';
    $variables['sidebar_first_grid'] = 'col-md-3 col-md-pull-9';
    $variables['sidebar_sec_grid'] = '';
  }
  else {
    // foundation:
    $variables['main_grid'] = 'large-12';
    $variables['sidebar_first_grid'] = '';
    $variables['sidebar_sec_grid'] = '';

    //bootstrap
    $variables['main_grid'] = 'col-md-12';
    $variables['sidebar_first_grid'] = '';
    $variables['sidebar_sec_grid'] = '';

  }

  // Add classes to highlighted region.
  if (!empty($variables['page']['highlighted'])) {
    $variables['page']['highlighted']['#attributes']['class'][] = 'region-highlighted';
    $variables['page']['highlighted']['#attributes']['class'][] = 'panel';
    $variables['page']['highlighted']['#attributes']['class'][] = 'callout';
  }

  $variables['page']['section_two'] = [
    '#type' => 'circled_icon',
    '#title' => 'The title of the icon',
    '#icon' => 'terminal',
  ];

}
/**
 * implement hook_bootstrap_colorize_text_alter()
 */
function pluraltheme_bootstrap_colorize_text_alter(&$texts) {
  // Tell bootstrap that "Send Now", "Send Later" and "Send" are primary buttons.
  $texts['matches'][t('Send Now')->render()] = 'primary';
  $texts['matches'][t('Send Later')->render()] = 'primary';
  $texts['matches'][t('Send')->render()] = 'primary';
}

