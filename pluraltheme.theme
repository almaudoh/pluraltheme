<?php

use Drupal\bootstrap\Bootstrap;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;

/**
 * Implements hook_theme_suggestion_HOOK_alter() for page.html.twig
 *
 * Theme suggestions for the dashboard.
 *
 * @param array $suggestions
 * @param array $variables
 */
function pluraltheme_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Theme suggestions for the stylized user login pages.
  if (!in_array('page__user_branding', $suggestions, TRUE)) {
    $route_name = \Drupal::routeMatch()->getRouteName();
    if (in_array($route_name, ['user.login', 'user.register','user.pass'], TRUE) && \Drupal::currentUser()->isAnonymous()) {
      $suggestions[] = 'page__user_branding';
      return;
    }
  }

  // Theme suggestions for the dashboard pages.
  if (!in_array('page__dashboard', $suggestions, TRUE)) {
    // If the current path is under one whose menu has been added to the dashboard,
    // then use the page.dashboard.html.twig template.
    // This is using a path-based association of current path and the path of the
    // menu item placed in the dashboard menu.
    $menu_name = Bootstrap::getTheme()->getSetting('dashboard_menu');
    $current_url = Url::fromRoute('<current>')->toString();
    foreach (\Drupal::service('menu.link_tree')->load($menu_name, new MenuTreeParameters()) as $route_name => $menu_element) {
      $link_url = $menu_element->link->getUrlObject()->toString();
      if (strpos($current_url, $link_url) === 0) {
        $suggestions[] = 'page__dashboard';
        return;
      }
    }

    // Further check on paths specified to be themed by the dashboard template.
    $paths = Bootstrap::getTheme()->getSetting('dashboard_paths');
    if (!empty($paths)) {
      foreach (explode("\n", $paths) as $path) {
        $url = str_replace('__WILDCARD__', '.*', Url::fromUserInput(str_replace('*', '__WILDCARD__', $path))->toString());
        if (preg_match('@^' . $url . '@', $current_url)) {
          $suggestions[] = 'page__dashboard';
          return;
        }
      }
    }

    // Final check on the 'dashboard_home' page.
    if ($current_url === Url::fromUserInput(Bootstrap::getTheme()->getSetting('dashboard_home'))->toString()) {
      $suggestions[] = 'page__dashboard';
      return;
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Alters the login, register and password forms to use placeholder attributes
 * and hides the titles.
 */
function pluraltheme_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'user_login_form') {
    foreach (Element::children($form) as $element) {
      if (isset($form[$element]['#title'])) {
        // Hide all the titles of elements in this register form, use placeholder.
        $form[$element]['#title_display'] = 'invisible';
        $form[$element]['#placeholder'] = $form[$element]['#title'];
      }
    }
  }
  else if ($form_id === 'user_register_form') {
    foreach (Element::children($form['account']) as $element) {
      if (isset($form['account'][$element]['#title'])) {
        // Hide all the titles of elements in this register form, use placeholder.
        $form['account'][$element]['#title_display'] = 'invisible';
        $form['account'][$element]['#placeholder'] = $form['account'][$element]['#title'];
      }
    }
    // Attached fields.
    foreach (Element::children($form) as $element) {
      if (isset($form[$element]['widget'])) {
        foreach (Element::children($form[$element]['widget']) as $item) {
          $form[$element]['widget'][$item]['value']['#title_display'] = 'invisible';
          $form[$element]['widget'][$item]['value']['#placeholder'] = $form[$element]['widget'][$item]['value']['#title'];
        }
      }
    }
  }
  else if ($form_id === 'user_pass') {
    // Hide the username textfield label and use a placeholder instead.
    $form['name']['#title_display'] = 'invisible';
    $form['name']['#placeholder'] = t('Username or email address');
  }
}

/**
 * Implements template_preprocess_item_list().
 */
function pluraltheme_preprocess_item_list(&$variables) {
  // Remove the "Create account" and "Reset password" links on the front page.
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    unset($variables['items']['create_account'], $variables['items']['request_password']);
  }
}

function pluraltheme_preprocess_menu(&$variables) {
  // Create a map for the dashboard page menu link icons.
  if (isset($variables['menu_name']) && $variables['menu_name'] === Bootstrap::getTheme()->getSetting('dashboard_menu')) {
    // Set the likely icon types for the various dashboard menu items.
    foreach ($variables['items'] as $route_name => $item) {
      if (stripos($item['title'], (string) t('price')) !== FALSE) {
        $variables['items'][$route_name]['icon'] = 'dollar';
      }
      elseif (stripos($item['title'], (string) t('sms')) !== FALSE) {
        $variables['items'][$route_name]['icon'] = 'envelope-o';
      }
      elseif (stripos($item['title'], (string) t('contact')) !== FALSE) {
        $variables['items'][$route_name]['icon'] = 'phone';
      }
      elseif (stripos($item['title'], (string) t('credit')) !== FALSE) {
        $variables['items'][$route_name]['icon'] = 'credit-card';
      }
      elseif (stripos($item['title'], (string) t('balance')) !== FALSE) {
        $variables['items'][$route_name]['icon'] = 'money';
      }
      else {
        $variables['items'][$route_name]['icon'] = 'diamond';
      }
    }
    // Add the dashboard_home menu link.
    $variables['dashboard_home'] = Url::fromUserInput(Bootstrap::getTheme()->getSetting('dashboard_home'))->toString();
  }
}

/**
 * Implements template_preprocess_page
 *
 * Add convenience variables and template suggestions
 */
function pluraltheme_preprocess_page(&$variables) {
  // Remove blocks that are not main content from the 'user/login' page.
  $route_name = \Drupal::routeMatch()->getRouteName();
  if (in_array($route_name, ['user.login', 'user.register','user.pass'], TRUE)) {

    foreach ($variables['page']['content'] as $key => $value) {
      // Unset blocks in the main content region that are not system_main_block
      // i.e. remove everything but the main content.
      if ($key[0] !== '#' && (!isset($value['#plugin_id']) || $value['#plugin_id'] !== 'system_main_block')) {
        unset($variables['page']['content'][$key]);
      }
    }
    // Also remove sidebar regions.
    $variables['page']['sidebar_first'] = $variables['page']['sidebar_second'] = '';
  }

  // Mark the dashboard page with a flag.
  $current_url = Url::fromRoute('<current>')->toString();
  $dashboard_home = Url::fromUserInput(Bootstrap::getTheme()->getSetting('dashboard_home'))->toString();
  if ($current_url === $dashboard_home) {
    $variables['is_dashboard_home'] = TRUE;
  }

}

/**
 * implement hook_bootstrap_colorize_text_alter()
 */
function pluraltheme_bootstrap_colorize_text_alter(&$texts) {
  // Tell bootstrap that "Send Now", "Send Later" and "Send" are primary buttons.
  $texts['matches'][t('Send Now')->render()] = 'primary';
  $texts['matches'][t('Send Later')->render()] = 'primary';
  $texts['matches'][t('Send')->render()] = 'primary';
}
